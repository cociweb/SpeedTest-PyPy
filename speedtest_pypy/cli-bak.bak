import argparse
import asyncio
import json
import logging
import sys
from .core import SpeedTest

# Enhanced logging configuration
#logging.basicConfig(
#    level=logging.DEBUG,
#    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
#    handlers=[logging.StreamHandler(sys.stdout)]
#)
#logger = logging.getLogger(__name__)
async def _async_main():
    parser = argparse.ArgumentParser(description='SpeedTest++ Python Implementation')
    parser.add_argument('--latency', action='store_true', help='Perform latency test only')
    parser.add_argument('--download', action='store_true', help='Perform download test only')
    parser.add_argument('--upload', action='store_true', help='Perform upload test only')
    parser.add_argument('--server', type=int, help='Use specific server ID')
    parser.add_argument('--threads', type=int, default=4, help='Number of threads to use')
    parser.add_argument('--json', action='store_true', help='Output in JSON format')
    args = parser.parse_args()

    speed_test = SpeedTest()
    try:
        await speed_test.initialize()
        logger.debug(f"Initialized with {len(speed_test.servers)} servers")

        if args.server:
            speed_test.selected_server = next((s for s in speed_test.servers if s.id == args.server), None)
            if not speed_test.selected_server:
                logger.error(f"Server with ID {args.server} not found")
                return
        else:
            await speed_test.find_best_server()

        if speed_test.selected_server.latency == float('inf'):
            logger.error("Failed to establish connection with the selected server")
            # Try to measure latency again
            try:
                await speed_test.test_latency(speed_test.selected_server)
                logger.debug(f"Retried latency measurement: {speed_test.selected_server.latency} ms")
            except Exception as e:
                logger.error(f"Latency retry failed: {e}")
                return

        logger.debug(f"Selected server: {speed_test.selected_server}")

        results = {}

        if speed_test.selected_server.latency != float('inf'):
            if args.latency or (not any([args.download, args.upload])):
                results['latency'] = speed_test.selected_server.latency
                logger.debug(f"Latency test result: {results['latency']} ms")

        if args.download or (not any([args.latency, args.upload])):
            try:
                results['download'] = await speed_test.test_download(args.threads)
                logger.debug(f"Download test result: {results['download']} Mbps")
            except Exception as e:
                logger.error(f"Download test failed: {e}")
                results['download'] = 0

        if args.upload or (not any([args.latency, args.download])):
            results['upload'] = await speed_test.test_upload(args.threads)

        if args.json:
            print(json.dumps(results))
        else:
            if 'latency' in results:
                print(f"Latency: {results['latency']:.2f} ms")
            if 'download' in results:
                print(f"Download: {results['download']:.2f} Mbps")
            if 'upload' in results:
                print(f"Upload: {results['upload']:.2f} Mbps")

    except Exception as e:
        logger.error(f"Error during speed test: {e}")
        return

def main():
    """Synchronous entry point for the command-line interface"""
    return asyncio.run(_async_main())

if __name__ == '__main__':
    main()